
//Include a i/o library
#include <iostream>
#include <math.h>
using namespace std;
const double c=2.9979e+10;
const double c_squared=c*c;
const double keV_2_ergs=1.6022e-9;
const double e_mass_g=9.1094e-28;
const double p_mass_g=1.6726e-24;
const double PI = 3.141592;
const double qe = 4.8032e-10;



//////////////////////////////////////////////////////////////////
/*HDW_RK4
 */
//////////////////////////////////////////////////////////////////
double hdw_rk4(double x0, double y0, double h){
  
  //Declare variables
  double k1;
  double k2;
  double k3;
  double k4;
  double f;
  double yn;
  double x;
  double y;

  f=derivs(x0, y0);
  k1=h*f;
  
  x=x0+(h/2.0);
  y=y0+(k1/2.0);
  f=derivs(x, y);
  k2=h*f;
  
  x=x0+(h/2.0);
  y=y0+(k2/2.0);
  f=derivs(x, y);
  k3=h*f;
  
  x=x0+h;
  y=y0+(k3);
  f=derivs(x, y);
  k4=h*f; 
  
  yn=y0+(k1/6.0)+(k2/3.0)+(k3/3.0)+(k4/6.0);

  return(yn);
  
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
/*REDUCED MASS:
  Given the mass of two particles (m1, & m2) return the reduced 
  mass of the system 
 */
//////////////////////////////////////////////////////////////////
double reduced_mass(double m1, double m2 ){
  double mu;
  
  mu=(m1*m2)/(m1+m2);

  return(mu);

}
//////////////////////////////////////////////////////////////////
/*
 */
//////////////////////////////////////////////////////////////////
double energy2gamma(double t_ke){
  //Declare variables
  double gamma;
  double E;
  //Define constants 
  // 
  E=t_ke*keV_2_ergs;
  
  gamma=(E/(e_mass_g*c_squared))+1.0e+0;
  
  //cout << gamma  ;
  //cout << " \n ";
  //cout << E ;
  //cout << " \n ";

  return(gamma);


}

//////////////////////////////////////////////////////////////////
/*
 */
//////////////////////////////////////////////////////////////////

double energy2vel(double t_ke){
  //Declare variables
  double gamma;
  double E;
  double v_total;
  double rest_energy;

  // 
  rest_energy=e_mass_g*c*c;
  gamma=energy2gamma(t_ke);
  v_total=(1.0-(1.0/(gamma*gamma)));
  v_total=pow(v_total,1./4.0);
  v_total=c*v_total;
    
  return(v_total);


} 


//////////////////////////////////////////////////////////////////
/*
 */
//////////////////////////////////////////////////////////////////

double patc_de_dv_dt( double t_ke, double v_para,
		     double dens, double m, double charge,
		     double a, double b, double dl,
		     double& de_dt, double& dvp_dt){

  //Declare Variables
  double v_total;
  double v_squared;
  double A_factor;
  double mu_e;
  double mu_p;
  double zeta_e;
  double zeta_p;
  double xi_e;
  double xi_p;
  double kinetic_energy;
  //  double de_dt;
  //  double dvp_dt;
  
  
  /*
    See my notes from Jan 18, 2008 for derivation and 
    Deviation from   Emslie, 1978
  */

  v_total=energy2vel(t_ke);
  v_squared=v_total*v_total;
  A_factor=(4.0*PI*dens*v_squared);
  // Reduced mass with protons as the target particles.
  mu_e=reduced_mass(m,e_mass_g);
  // Reduced mass with protons as the target particles.
  mu_p=reduced_mass(m,p_mass_g);
  //
  
  cout << qe  << " qe"  ;
  cout << " \n ";
  cout << charge  << " charge"  ;
  cout << " \n ";
  cout << mu_e  << " mu_e"  ;
  cout << " \n ";
  cout << mu_p  << " mu_p"  ;
  cout << " \n ";
  cout << v_squared  << " v_squared"  ;
  cout << " \n ";
  zeta_e=(qe*charge)/(mu_e*v_squared);
  cout << zeta_e  << " zeta_e"  ;
  cout << " \n ";
  zeta_e=pow(zeta_e, 2.0);
  
  xi_e=(5e-1)*(zeta_e)*log(1.0+((dl*dl)/zeta_e));
  zeta_p=(qe*charge/(mu_p*v_squared));
  zeta_p=pow(zeta_p,2.0);
  xi_p=(5e-1)*(zeta_p)*log(1.0+(dl*dl/zeta_p));
  // Coul_out=[alog(1d0+((dl*dl)/zeta_e)),alog(1d0+(dl*dl/zeta_p)) ];



   //Random element. Number of electron collisions to proton collisions.
   // 
   
   de_dt=-1.0*A_factor*v_total*(((a*(mu_e*mu_e)/e_mass_g) 
				 *(xi_e)) 
				+((b*(mu_p*mu_p)/p_mass_g) 
				  *xi_p));
  
   
  cout << zeta_p  << " zeta_p"  ;
  cout << " \n ";
  cout << zeta_e  << " zeta_e"  ;
  cout << " \n ";
  cout << A_factor  << " A_factor"  ;
  cout << " \n ";
  cout << v_total << " v_total"  ;
  cout << " \n ";
  cout << mu_e  << " mu_e"  ;
  cout << " \n ";
  cout << b  << " b"  ;
  cout << " \n ";
  cout << e_mass_g  << " e_mass_g"  ;
  cout << " \n ";
  cout << xi_e  << " xi_e"  ;
  cout << " \n ";
  cout << xi_p  << " xi_p"  ;
  cout << " \n ";
  cout << p_mass_g  << " p_mass_g"  ;
  cout << " \n ";
  de_dt=de_dt/keV_2_ergs;
  
  
  dvp_dt=-(A_factor/m)* 
    ((mu_e*xi_e)+(mu_p*xi_p));
  
  //de_dt=5.0;
  //dvp_dt=78;
  return(0);
	  
	  
}


//////////////////////////////////////////////////////////////////
/*
 */
//////////////////////////////////////////////////////////////////

int main(){
  double vel;
  double v_para;
  double t; 
  double de_dt;
  double dvp_dt;
  double dens;
  double m;
  double charge;
  double a;
  double b;
  double dl;
  double t_ke;
  double junk;
//
  charge=1.0;
  t=1e-6;
  
  a=0.9999999999;
  b=1.0-a;
  dl=1e+5;
  dens=1e+9;
  de_dt=1;
  dvp_dt=1;
  m=e_mass_g;

//
  t_ke=400;
  vel=energy2vel(t_ke);

  v_para=0.5*vel;
  

  cout << vel  ;
  cout << " \n ";
  junk=patc_de_dv_dt(  t_ke, v_para,
		      dens,  m,  charge,
		      a,  b,  dl, de_dt, dvp_dt);


  
  cout << de_dt  ;
  cout << " \n ";
  de_dt=de_dt/keV_2_ergs;
  cout << de_dt   << " de_dt";
  cout << " \n ";


  cout << dvp_dt   << " dvp_dt"  ;
  cout << " \n ";

  return(vel);
}



