;+
; NAME:
;	mk_semi_circular_loop
;
; PURPOSE:
;	Generate a semi-circular loop then 
;        create a file for input to the evolve hydro codes and PaTC
;
; CATEGORY:
;	Hydrodynamics codes
;       PaTC
;
; CALLING SEQUENCE:
;	
;
; INPUTS:
;	radius: [cm]
;
;       diameter: [cm] Cross-sectional diameter of loop. Considered
;       constand for now. 
;     
;       length: [cm] Length of the loop, It's a semi-circular loop so
;       the  radius of that circle will be length/!dpi. 
;
;       B: [Gauss] Considered constant since the loop diameter is
;       constant
;
; OPTIONAL INPUTS:
;	
;	
; KEYWORD PARAMETERS:
;	Q0: Volumetric heating rates
;
; OUTPUTS:
;	 state:  Loop History structure $
;       
;        g: [cm s^-2] Parallel acceleration duw to gravity
;    
;        A:[cm^2] area of the fid faces
;       
;        s: [cm] length coordinate.  Face to face of the grid cells 
;        n: [cm^-3] Electron density
;        E_h, 
;        L [cm] New loop half-length, \
;        T_max [[K] Loops maximum temperature
;        orig, 
;        n_depth depth of chomospheric penetration
;	
;
; OPTIONAL OUTPUTS:
;
; COMMON BLOCKS:
;	
;
; SIDE EFFECTS:
;	
;
; RESTRICTIONS:
;	
;
; PROCEDURE:
;	
;
; EXAMPLE:
;	
;
; MODIFICATION HISTORY:
; 	Written by:Rebecca McMullen (RAM) start_loop.pro. 
;                   Heavily modified by Henry (Trae) Winter II (HDWIII)
;
;        10/29/01 - Plan to run w/o toilet bowl chromosphere!
;                   extend last footpoint deep into the chromosphere
;        04/30/02	RAM	fixed discontinuity in dx
;			changed to constant area in chromosphere
;        10/29/01 - Use file 'xbp1_1020.sav', from data at 10:20UT
;        04/17/03 - Stops taken out HDWIII
;        11/28/04 - Stops taken out HDWIII
;        02/08/2006 - Made mk_semi_circular_loop from t_start_loop.pro
	
;-
PRO mk_semi_circular_loop,diameter,length, $
  T_MAX=T_MAX, N_DEPTH=N_DEPTH,$
  B=B,Q0=Q0,  nosave=nosave, $
  outname=outname,N_CELLS=N_CELLS,$
  X_SHIFT=X_SHIFT,Y_SHIFT=Y_SHIFT,$
  Z_SHIFT=Z_SHIFT, LOOP=LOOP,$
  DEPTH=DEPTH,$
  ADD_CHROMO=ADD_CHROMO,$
  N_CORONA_CELLS,  N_CHROMO_CELLS

compile_opt STRICTARR
Notes=strarr(5)
notes[0]='Semi circular loop'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Define some constants
Mega_meter2cm=1d8
cm2Mega_meter=1d-8
;Solar surface gravity acceleration[cm s^-2]
g0 =2.74d4
;Solar radius [cm]
R_Sun=6.96d10
h_chromosphere=2d8
;Height of the Corona above the photosphere[cm]
h_corona=2d8
d_chrom=2d6
d_chrom=h_corona
;Boltzmann constant (erg/K)
kB = 1.38d-16      
;proton mass (g)
mp = 1.67d-24     
;Chromospheric Temperature   
T0=1.d4          
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Do some work with keywords & positional parameters
if size(t_max,/type) eq 0 then t_max=1d6
	
if not keyword_set(Q0) then q0=0.0007 
;;erg/x - number to yield t_max=9e5 K - RAM 10092002

if not keyword_set(X_SHIFT) then X_SHIFT=0d $
else X_SHIFT=double(X_SHIFT)
if not keyword_set(Y_SHIFT)  then Y_SHIFT=0d $
else Y_SHIFT=double(Y_SHIFT)
if not keyword_set(Z_SHIFT)  then Z_SHIFT=0d

if size(diameter,/TYPE) eq 0 then diameter=7d8 ;[cm]
if size(length,/TYPE) eq 0 then length=1d9;[cm]
if size(B,/TYPE) eq 0 then B=100 ;[Gauss]
;
if size(n_depth ,/TYPE) eq 0 then n_depth=100l

if not keyword_set(N_CELLS)  then $
  N_CELLS =long64(300) else $
  N_CELLS =long64(N_CELLS)

IF keyword_set(outname) THEN outname=outname $
ELSE outname='SC_Loop'+strcompress(q0,/remove_all)

if not keyword_set(DEPTH) then DEPTH= 2e6
;Number of surface grids
n_surf=N_CELLS-1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Make the axis for a semicircle
radius=length/!dpi
theta = (findgen(n_surf)*!dpi / (n_surf-1l))-(!dpi/2)
yy = radius * sin(theta)
zz = radius * cos(theta)
axis=dblarr(3,n_surf)
axis[0,*]=DBLARR(n_surf)+X_SHIFT
axis[1,*]=(yy+Y_SHIFT)
axis[2,*]=zz+Z_SHIFT+h_corona
z=reform(axis[2,*])
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Dimensionless gravitational acceleration parallel to the loop.
; See Klimchuck,Tanner, & Moore, 2004
;Theta is defined differently from my notes so the sine is more
;appropriate than the cosine
g=sin(theta)*((R_Sun/(R_Sun+axis[2,*]))^2d)
;Gravitational acceleration [cm s^2]
g=g*g0
;Coordiante of grid faces[cm]
s=(dindgen(n_surf)*!dpi / (n_surf-1))*radius ;


B=dblarr(n_surf)+B

RAD=dblarr(n_surf)+(.5d*diameter)
;Calculate areas in cm^2
a=(rad)^2*!dpi
; Maxwells [Gauss cm^2]
flux=max(b*a)
;Loop length
L=max(s)
s_alt=msu_get_s_alt(s)
;Volume elements
dv=msu_get_volume(s,a)
;stop
;IF n_elements(q0) eq 0 THEN BEGIN
;    IF n_elements(power) eq 0 THEN power=1d24 ;erg/s Cargill & Klimchuck (2004)
;    q0=power/total(dv) ;was 7.e-4 erg/cm^3/s Kankelborg&Longcope, 1999 p.71
;ENDIF ELSE IF n_elements(power) eq 0 THEN  power=q0*total(dv)
time=0.                         ;start time
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;RTV SOLUTION 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Give the coronal portion of the loop a density and temperature 
;  profile based on RTV heating

T=dblarr(N_CELLS)
n_e=dblarr(N_CELLS)
E=dblarr(N_CELLS)
;given T_max and L, get P(s), T(s), E(s)
 ;t_max=1.4e3*(e_h*(L^2.)/(9.8e4))^(2./7.) ;If you have e_h

;scaling law if you have t_max
heat = 9.14d-7 * T_max^3.51d * (L/2d)^(-2d) 

;Loop is at a constant pressure
P=((T_max/1.4d3)^3)/L                       ;RTV eqn 4.3

;Temperature profile
;T = T_max * ( 4d * s_alt/L $
;              * (1d - (s_alt/L)) )^0.333333d ;CCK empirical

T = T_max*(4*(s_alt-depth)/(L-2*depth) * $
	(1-(s_alt-depth)/(L-2*depth)))^.3333333d

;put in footpt cutoff - don't allow temperatures too low.
T  >= T0       
;n_e=0.5*n=0.5*(P/kt) number density             
n_e=0.5*(P/(kb*T))              
;E=3/2 nkt=3/2 2n_e kt
E=3./2. *2*n_e* Kb*T            

v = fltarr(n_surf)
volumes=msu_get_volume(s,a)
e_h=dblarr(n_elements(volumes))+heat
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Make the state variable and check it
state={e:double(e), n_e:double(n_e), v:double(v), time:float(time)}
sizecheck, state,g,A,s, E_h
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Make the loop structure for PaTC
LOOP=mk_loop_struct(STATE=state,$
                    S_ARRAY=s,B=b,G=g,AXIS=axis,$
                    AREA=A,RAD=rad, $
                    E_H=e_h,T_MAX=t_max,N_DEPTH=n_depth,$
                    NOTES=notes,DEPTH=DEPTH,$
                    start_file=outname+'.sav')
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Add on the Chromosphere
if keyword_set(ADD_CHROMO) then $
  LOOP=add_loop_chromo(loop, T0=T0, DEPTH=DEPTH, N_DEPTH=N_DEPTH)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;regrid if desired
;if keyword_set(regrid) then begin
; if !d.name eq 'X' then begin
;     oldwindow=!d.window
;     window,16, title=!computer+'Regrid'
; endif
; regrid_step, loop, /showme
;              
; if !d.name eq 'X' then wset, oldwindow
;endif

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
dv=msu_get_volume(s,a)
;junk=check_res( loop.state, dv, n_depth, /noisy)
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
if size(outname,/type)lt 1 then outname=''

 IF keyword_set(nosave) THEN BEGIN
  print,'not saving' 
 ENDIF ELSE BEGIN
     print, 'saving file: "'+outname+'.loop"'
     
     save, file=outname+'.loop',loop
  
ENDELSE

END







