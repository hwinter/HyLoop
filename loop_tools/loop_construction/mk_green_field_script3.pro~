;mk_green_field_script3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Thought this might make the call_external commands work.
$source ~/.cshrc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Begin parameter definition section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Check for and report math errors 
old_except= !except                  
!except=2
compile_opt strictarr
;From line_trace2.pro
plot_state=!d.name
set_plot,'x'
n_levels=40;Number of levels to contour
B0=100d ;Maximum Magnetic field [Gauss]
Area_0=!dpi*(1d8)^2d ;Footpoint area [cm^2]
;range=
max_height=1.6d9 ;Loop height Fletcher & Martens
T_max=1d*1d6 ;Loop top temperature (Approximate)
;q0=7d-4

;Place to save the loop parameters before the equilibrium procedure.
start_file=getenv('PATC')+'/test/loop_data/'+ $
           strcompress(string(bin_date()),/REMOVE_ALL)+ $
           '_'+!computer+'_gcsm_start.loop'

;Place to save the loop parameters after the equilibrium procedure.
save_file=getenv('PATC')+'/test/loop_data/'+ $
           strcompress(string(bin_date()),/REMOVE_ALL)+ $
           '_'+!computer+'gcsm_loop.sav'
;The index of the desired field line changes based on indian-ness 
; and the number of bungey_cells used
case Strlowcase(!computer) of 
    'dawntreader':line_index=0
    'filament':line_index=0
    'mithra':line_index=0
    'fire':line_index=0
    'titan': line_index=1
    'jupiter':line_index=1
    'wind':line_index=1
    else: line_index=0
endcase


;line_index=0
separator_offset=0
chars=1.
chart=1.
bungey_cells=1d3
n_cells=400l                    ;Number of initial volumes
n_depth=20l                     ;Number of initial surfaces in the Chromosphere
;computer='dawntreader'
;computer='mithra'
max_time=3d0*60d0*60d0          ;Time to allow loop to come to equilibrium
rtime=10d0                      ;Output timestep
DELTA_T=1d0                     ;reporting  timestep
time=0d0                        ;The simulation start time
safety=5d0                      ;Number that will be divided by
                                ;  the C. condition to determine the timestep
grid_safety=3d                  ;Number that will be divided by
                                ;  the minimum characterstic scale length to determine
                                ;  the grid sizing
note='Green style current sheet initially given RTV scaling'

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;End parameter definition section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Define some constants
Mega_meter2cm=1d8
cm2Mega_meter=1d-8
;Solar surface gravity acceleration[cm s^-2]
g0 =2.74d4
;Solar radius [cm]
R_Sun=6.96d10
d_chrom=2d6
depth=d_chrom*.7
;Height of the Corona above the photosphere[cm]
h_corona=2d8
;Boltzmann constant (erg/K)
kB = 1.38d-16      
;proton mass (g)
mp = 1.67d-24     
;Chromospheric Temperature   
T0=1.d4 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Start section to define loop from a Green style current sheet.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Plotting choices
bgc=255
fgc=0
xs=600
ys=600
regrid_window=18
evolve_window=19
if !d.name ne 'Z' then DEVICE, SET_FONT='Times', /TT_FONT  
if !d.name eq'X' then window,regrid_window  
if !d.name eq 'X' then window,evolve_window,TITLE='Evolve Window'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Determine the number of volumes that will be in the corona.
;The final + two are for endpoints that will be replaced by 
;n_depth cells
;N_corona=n_cells-(2*n_depth)


so =get_bnh_so();Grab the proper shared object file

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Calculate the magnetic field given by a Green type reconnection
;  model
bungey_priest_field,B_z,b_y,z,y,f,a=1,B_DRC=0.5,$
                    B0=b0,B_total=B_total,$
                    N_ELEM=bungey_cells
                   
;Make it look like a loop instead of on its side
f2=real_part(transpose(f))
b2=transpose(B_total)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
if !d.name eq 'X' then window,0,xs=xs,ys=ys
contour,f2,y,z,nlevels=n_levels,/path_data_coords,$
  path_xy=path_xy,path_info=path_info,$
  path_double=1,closed=0,/ISOTROPIC ,$
        color=fgc,background=bgc
;stop

VALUE_IND=WHERE(path_info.value LT 0)
VALUE_IND2=WHERE(path_info.value gt 0)
LEVELS=[(path_info[VALUE_IND].value), $
        (0D),$
        (path_info[VALUE_IND2].value)]
LEVELS=levels[sort(levels)]
levels=levels[uniq(levels)]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;plot the Separator field line over the the other field lines
;Make a contour map of field lines
contour,f2,y,z,nlevels=n_levels,$
        TITLE="Field Lines for Green's current sheet solution",$
        levels=levels,/ISOTROPIC,color=fgc,background=bgc,$
        chars=chars, chart=chart
;overplot the current sheet
oplot,[0.,0.],[1,-1],thick=2,color=fgc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Choose the separatrix field line
y_ind=where(abs(y-0d) eq min(abs(y-0d)))
z_ind=where(abs(z-(-1.01d)) eq min(abs(z-(-1.01d))))
help,z_ind  

value=f2[y_ind[0],z_ind[0]]
value=0d
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Now find the line just below the separatrix
LEVELS=[(path_info[VALUE_IND].value), $
        (path_info[VALUE_IND2].value)]
LEVELS=levels[sort(levels)]
levels=levels[uniq(levels)]

value=levels[where(abs(levels-0) eq $
                   min(abs(levels-0))) $
             -separator_offset]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Get the coordinates for the field line with the chosen value
contour,f2,y,z,nlevels=n_levels,$
  /path_data_coords,path_xy=path_xy2,$
  path_info=path_info2,path_double=1,$
  closed=0,levels=value,/ISOTROPIC             ; path_info[1].value

n_lines=n_elements(path_info2)
n_points=path_info2[line_index].n
line_end=path_info2[line_index].offset+n_points-1l
;if line_index+1l ge n_lines-1l then $
;  line_end= n_elements(path_xy2[0,*])-1l $
;  else line_end=path_info2[line_index+1l].offset-1l

;make it red and plot it
loadct,3,/SILENT
for i =0, n_elements(path_xy2[0,*])-1l do begin
;wait,0.01 
 plots, path_xy2[*,$
                 path_info2[line_index].offset: $
                 line_end], color=135,thick=4, $
        /DATA;,chars=chars, chart=chart
;oplot, path_xy2[*,$
;                path_info2[line_index].offset: $
;                line_end],color=135,thick=3


; wait,.001
endfor
;stop
;if !d.name eq 'X' then x2gif,'field_lines.gif'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Find the number of points corresponding to the line you are
;interested in
n_points=path_info2[line_index].n
;help,path_xy2[*,path_info2[line_index].offset:n_elements(path_xy2[0,*])-1l]

by=dblarr(n_points)
bz=by
bTOT=bz
B_T=bz
if !d.name eq 'X' then window,2
y_index=lonarr(n_points)
z_index=lonarr(n_points)
y2=dblarr(n_points)
z2=dblarr(n_points)
s=dblarr(n_points) ;Distance along the field line
;plot,y,z,/NODATA,TITLE='Field Line'

for i=0l,n_points-1l do begin
    ypos=reform(path_xy2[0,path_info2[line_index].offset+i])
    zpos=reform(path_xy2[1,path_info2[line_index].offset+i])
    y_index=where(abs(ypos[0]-y) eq min(abs(ypos[0]-y)))
    z_index=where(abs(zpos[0]-z) eq min(abs(zpos[0]-z)))
    if (y_index[0]eq -1) or (z_index[0] eq -1 ) then stop
    by[i]=b_y[y_index,z_index]
    bz[i]=b_z[y_index,z_index]
    B_T[i]=b2[y_index,z_index]
    bTOT[i]=sqrt((by[i]^2d)+(bz[i]^2d))
    plots,y[y_index],z[z_index],psym=4
    y2[i]=y[y_index]
    z2[i]=z[z_index]

;Determine the distance along the loop from y & z coordinates
   if i ne 0l then $
     s[i]=s[i-1]+sqrt(((y2[i]-y2[i-1l])^2d)+((z2[i]-z2[i-1l])^2d))
endfor

;if !d.name eq 'X' then window,4
;plot,b_t/max(b_t),$
;  TITLE='B Along the loop [Normalized]'
;x2gif,'loop_B.gif'
;window,5
;plot,bTOT,TITLE='FROM script.'  ;*100
;help,btot

;if !d.name eq 'X' then window,6
;loadct,1,/SILENT
;contour,b2,y,z,/CELL_FILL,NLEVELS=60,/ISOTROPIC
;loadct,3,/SILENT
;plots, path_xy2[*,$
;                 path_info2[line_index].offset: $
;                line_end]
;contour,b2,y,z,nlevels=10,path_info=path_info3,/ISOTROPIC 
;LEVELS=[0D,path_info3.value]
;LEVELS=levels[sort(levels)]
;levels=levels[uniq(levels)]
; contour,b2,y,z,nlevels=10,$
;   c_labels=string(path_info3.value),/OVERPLOT ,$
;   LEVELS=LEVELS,/ISOTROPIC ,c_charsize=1
;if !d.name eq 'X' then x2gif,'B_map.gif' 


for i=0,20 do b_t=smooth(b_t,3)
for i=0,20 do s=smooth(s,3)
;Interpolate,s in the corona with unifrom grid spacing
;s2=s[0]+(s[n_elements(s)-1l]*dindgen(N_corona-1)/(N_corona-2))
s2=s[0]+(s[n_elements(s)-1l]*dindgen(n_cells-1)/(n_cells-2))
print,'S test.  Old min, max S.  New Min Max s'
s0=s
for i=0,20 do s2=smooth(s2,3)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Interpolate,b_t
b=dblarr(n_cells-1)
;b=spline(s0,b_t,s2, 0.1)
;Interpolation program sometimes goes BOOM!
foo =  call_external(so, $            ; The SO
                    'bnh_splint', $  ; The entry name
                    n_points, $   ; # of elements in x, f(x)
                    s, $ ; x
                    b_t, $                    ; f(x)
                    (n_cells-1), $; # elements in thing-to-interpolate
                    s2, $                       ; thing-to-interpolate
                    b, $                ; where the answer goes
                    /d_value, $ 
                    value=[1,0,0,1,0,0], $ 
                    /auto_glue,/cdecl,/ignore_exist) ;, $/ignore_exist,
;help,b
;stop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Interpolate,y
y_old=path_xy2[0,path_info2[line_index].offset: $
               line_end]
;y=spline(s,y_old,s2)
y= dblarr(n_cells-1)  
foo = call_external(so, $            ; The SO
                    'bnh_splint', $  ; The entry name
                    n_points, $   ; # of elements in x, f(x)
                    s, $ ; x
                    y_old, $                  ; f(x)
                    (n_cells-1), $            ; # elements in thing-to-interpolate
                    s2, $                     ; thing-to-y
                    y, $                      ; where the answer goes
                    /d_value, $ 
                    value=[1,0,0,1,0,0], $ 
                    /auto_glue,/cdecl) ;, $/ignore_exist,

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Interpolate,z
z_old=path_xy2[1,path_info2[line_index].offset: $
                   line_end]
;z=spline(s,z_old,s2)
z= dblarr(n_cells-1)  
foo = call_external(so, $            ; The SO
                    'bnh_splint', $  ; The entry name
                    n_points, $   ; # of elements in x, f(x)
                    s, $ ; x
                    z_old, $                  ; f(x)
                    (n_cells-1), $            ; # elements in thing-to-interpolate
                    s2, $                     ; thing-to-interpolate
                    z, $                      ; where the answer goes
                    /d_value, $ 
                    value=[1,0,0,1,0,0], $ 
                    /auto_glue,/cdecl) ;, $/ignore_exist,
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;stop
;Redefine s 
s=s2

help,b
print,total(finite((b)))

if n_elements(b) ne total(finite(b)) then stop
a=Area_0*(max(b)/b)

if n_elements(b) ne total(finite(b)) then stop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Scale everything to Z
shift_z=-1d*min(z)
z=z+shift_z
shift_y=-1d*min(y)
y=y+shift_y
y=reverse(y)
scale_factor=max_height/max(z)
;z=z*scale_factor+d_chrom
z=z*scale_factor
y=y*scale_factor
axis=dblarr(3,n_cells-1l)
help,axis
axis[0,*]=0d
axis[1,*]=y
axis[2,*]=z
s=s*scale_factor 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;get rid of leading space	04/30/02	RAM
s=s-s[0]                     
s_alt = msu_get_s_alt(s)   
;s_alt=msu_get_s_alt(s,/GT0)

rad=sqrt(a/!dpi)

z_alt=msu_get_s_alt(z)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
coronal_index=where(z_alt gt d_chrom, COMPLEMENT=chromo_index)
n_corona=n_elements(coronal_index)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;if !d.name eq 'X' then window,1
;plot,axis[1,*],axis[2,*], Title='Loop axis', $
;     XTITLE="Y [cm]",YTITLE='Z [cm]',$
;     /ISOTROPIC

sine_theta=-1d*smooth(deriv(z)/deriv(s),10,/EDGE)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Dimensionless gravitational acceleration parallel to the loop.
; See Klimchuck,Tanner, & Moore, 2004
;Theta is defined differently from my notes so the sine is more
;appropriate than the cosine
;g=sin(theta)*((R_Sun/(R_Sun+axis[2,*]))^2d)
g=sine_theta*((R_Sun/(R_Sun+axis[2,*]))^2d)

;Gravitational acceleration [cm s^2]
g=reform(g)*g0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
L=max(s) ;Loop  length
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;End section to define loop from a Green style current sheet.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;******* RTV SOLUTION ******************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Give the coronal portion of the loop a density and temperature 
;  profile based on RTV heating

T=dblarr(n_cells)
n_e=dblarr(n_cells)
E=dblarr(n_cells)
;given T_max and L, get P(x), T(x), E(x)
 ;t_max=1.4e3*(e_h*(L^2.)/(9.8e4))^(2./7.) ;If you have e_h

;scaling law if you have t_max
heat = 9.14d-7 * T_max^3.51d * (L/2d)^(-2d) 
q0=heat

;Loop is at a constant pressure
P=((T_max/1.4d3)^3)/L                       ;RTV eqn 4.3

;Temperature profile
T[coronal_index] = T_max * ( 4d * s_alt[coronal_index]/L $
              * (1d - s_alt[coronal_index]/L) )^0.333333d ;CCK empirical

;put in footpt cutoff - don't allow temperatures too low.
T[coronal_index] = T[coronal_index] > T0       
;n_e=0.5*n=0.5*(P/kt) number density             
n_e[coronal_index]=0.5*(P/(kb*T[coronal_index]))              
;E=3/2 nkt=3/2 2n_e kt
E[coronal_index]=3./2. *2*n_e[coronal_index]* Kb*T[coronal_index]            

;N = n_elements(e)
v = fltarr(n_cells-1ul)
volumes=msu_get_volume(s,a)
e_h=dblarr(n_elements(volumes))+heat
;stop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; add on chromosphere 
g_alt=spline(s,g,s_alt)
dz=z[chromo_index]-min(z[coronal_index])

;Calculate the gas pressure of a stratified atmosphere
; form the corona down
p_chromo=P*(exp((-1d0*mp*abs(g[chromo_index])*dz)/(kb*T0)))

;Remembering that n_p~n_e and P=nkT
n_e[chromo_index]=p_chromo/(2d0*kb*T0)
n_e>=min(n_e[where(n_e gt 0)])
E[chromo_index]=(3./2.) *2.*n_e[chromo_index]* Kb*T0           

;UPDATE 10/29/01 - run w/o toilet bowl chromosphere!
;extend last footpoint deep into the chromosphere
;keep grid refined in TR

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Start regrid definition section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;smooth initial conditions to prevent numerical misbehavior
;for j = 1, 10 do begin
;    e = smooth(e,3)
;    n_e=smooth(n_e,3)
;    a=smooth(a,3)
;    g=smooth(g,3,/edge)
    ;e_h=smooth(e_h,3)
;endfor

;for j=1, 10 do begin
;    g=smooth(g,10,/edge)
;endfor


;a[*]=area_0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
state={e:double(e), n_e:double(n_e), $
       v:double(v), time:double(time)}

help,state,/str
if !d.name eq 'X' then stateplot2,s,state,/screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sizecheck, state,g,A,s, E_h
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;regrid4, state,g,a,s,e_h,/showme,/nosave
;goto, end_jump

;stop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Calculate the temperature 
T = state.e/(3.0*state.n_e*kB)
t_max=max(T)
sizecheck, state[0],g,A,s, E_h
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;junk=check_res( state, dv, n_depth, /noisy)

LOOP=mk_loop_struct($
                    STATE=state,S_ARRAY=s,$
                    B=b,G=g, AXIS=AXIS,$
                    RAD=rad,area=A ,T_MAX=t_max,$
                    E_H= e_h[*,0],  N_DEPTH=n_elements(chromo_index),$
                    NOTES=note,DEPTH=d_chrom,$
                    TIME=0D,$
                    start_file='gcsm_loop.sav')

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sizecheck, loop[0].state,loop[0].g,loop[0].a,loop[0].s,loop[0].E_h
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;stop
if !d.name eq 'X' then wset,regrid_window
regrid_step, loop,/NOSAVE,MAX_STEP=5d8,/SHOWME
help, loop,/str
e = loop[0].state.e  
n_e=loop[0].state.n_e
g= loop[0].g

;Save the initial loop information to a file
save , loop, start_file

for j = 1, 10 do begin
    e = smooth(e,3)                          
    n_e=smooth(n_e,3)
    ;a=smooth(a,3)
    g=smooth(g,3,/edge)
    ;e_h=smooth(e_h,3)
endfor

loop[0].state.e=  e 
loop[0].state.n_e=n_e
loop[0].g=g

if !d.name eq 'X' then window,19,TITLE='After Regrid'

if !d.name eq 'X' then stateplot2,LOOP.s, LOOP.state,/SCREEN




equil_counter=1
done=0
max_v=1d7
;stop
while not done do begin
    n_loop=n_elements(loop)   
    state=loop[n_loop-1l].state
    g=loop[n_loop-1l].g
    a=loop[n_loop-1l].a
    s=loop[n_loop-1l].s
    e_h=loop[n_loop-1l].e_h[*,0]
    n_depth=loop[n_loop-1l].n_depth
                                ;print, equil_counter;
;    msu_evolve_loop2, g,a,s, rtime,  DELTA_T,e_h, n_depth, $
;                    outfile=outfile, q0=q0, $
;                    /showme,  $ ;q0=q0,
;                    computer=!computer,$
;                    lhist=state;,so=so ;,/novisc
    loopmodelt2, g, A, s, q0, rtime, T0=1e4, $
                 /fal, /uri,lhist=state,$
                 safety=5,$;safety,$
                 so=so,/src,  DELTA_T=DELTA_T  ,$
                 OUTFILE='foo.sav';,depth=depth

    n_state=n_elements(state)             
    state[n_state-1].e=abs(state[n_state-1].e)
    state[n_state-1].n_e=abs(state[n_state-1].n_e)
    temp_loop=loop[n_loop-1l]
    temp_loop.state=state[n_elements(state)-1l]
    temp_loop.state.time=state[n_elements(state)-1l].time
    loop=temp_loop
    
    if !d.name eq 'X' then window,18,TITLE='Before Regrid'
    if !d.name eq 'X' then stateplot2,LOOP.s, LOOP.state,/SCREEN
    
    if !d.name eq 'X' then wset,regrid_window
    help, loop,/STR
    regrid_step, loop,/NOSAVE,MAX_STEP=5d8,/SHOWME
    if !d.name eq 'X' then window,19,TITLE='After Regrid'
    help, loop,/STR
    if !d.name eq 'X' then stateplot2,LOOP.s, LOOP.state,/SCREEN
;Determine the maximum veloxity
    max_v=max(abs(loop.state.v))
    if max_v le 1d4 then done =1
;Artificially smooth
    ;for j=0,5 do state.v[*]=smooth(state.v,10)      
    ;for j=0,5 do e = smooth(e,7)
;Artificially kill the velocity
    ;state.v[*]=0
    print, 'Min/Max velocity:'
    pmm,abs(loop.state.v)
    if equil_counter eq 400 then done=1
    equil_counter +=1
    if loop.state.time gt max_time then done=1
    DONE=1
endwhile


end_jump:
e_h=e_h[*,0]
print,'Saving file: ', save_file
save,g, A, s, rad, state, E_h,axis,b,loop,q0, heat,e_h,file='./gcsm_loop.sav'



;reset the except state             
!except=old_except
set_plot, plot_state
END

