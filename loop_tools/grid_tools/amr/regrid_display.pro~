;+
; NAME:
;	
;
; PURPOSE:
;	
;
; CATEGORY:
;	
;
; CALLING SEQUENCE:
;	
;
; INPUTS:
;	
;
; OPTIONAL INPUTS:
;	
;	
; KEYWORD PARAMETERS:
;	
;
; OUTPUTS:
;	
;
; OPTIONAL OUTPUTS:
;	
;
; COMMON BLOCKS:
;	
;
; SIDE EFFECTS:
;	
;
; RESTRICTIONS:
;    Not fully vectorized	
;
; PROCEDURE:
;	
;
; EXAMPLE:
;	
;
; MODIFICATION HISTORY:
; 	Written by:	
;-

pro regrid_display, old_loop, new_loop


legend_titles=['E','N_e','V','B', 'T']
;Color definition taken straight from the IDL
; help TVLCT description
;Define the colors for a new color table:
colorLevel = [[0, 0, 0], $         ; black  
              [255, 0, 0], $       ; red  
              [255, 255, 0], $     ; yellow  
              [0, 255, 0], $       ; green  
              [0, 255, 255], $     ; cyan  
              [0, 0, 255], $       ; blue  
              [255, 0, 255], $     ; magenta  
              [255, 255, 255]]     ; white  
;Create a new color table that contains eight levels,
; including the highest end boundary by first deriving 
; levels for each color in the new color table:
    
numberOfLevels = CEIL(!D.TABLE_SIZE/8.)  
level = INDGEN(!D.TABLE_SIZE)/numberOfLevels  

;Place each color level into its appropriate range.
newRed = colorLevel[0, level]  
newGreen = colorLevel[1, level]  
newBlue = colorLevel[2, level]  
    
;Include the last color in the last level:
newRed[!D.TABLE_SIZE - 1] = 255  
newGreen[!D.TABLE_SIZE - 1] = 255  
newBlue[!D.TABLE_SIZE - 1] = 255  
  
    
color_index=[40,$                  ; red     
             80, $                 ; yellow  
             120, $                ; green  
             140, $                ; cyan  
             190, $                ; blue  
             215, $                ; magenta  
             255]                  ; white   
;Make the new color table current:    
;TVLCT, newRed, newGreen, newBlue
tvlct, red, green, blue, /GET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Testing procedures to plot new values over old
if keyword_set(showme) then begin
    window,!d.window, XS=14000, YSIZE=900, $
            TITLE='Regrid Window'
    old_p_state=!p.multi
    old_chars=!p.charsize
    old_chart=!p.charthick
    !p.charsize=2
    !p.charthick=1.5
    !p.multi=[0,3,2]
    ;old_margin=!p.margin
;
   
    plot,old_loop.s, title='old & new s vs. index',$
         XTITLE='Index #',$
         YTITLE='[cm]',$
         YRANGE=[min([old_loop.s, new_s]),$
                 max([old_loop.s,new_s])*1.1]
    TVLCT, newRed, newGreen, newBlue
    for i=0l, n_elements(new_s)-1l do begin
        plots, i,new_s[i], PSYM=1, COLOR=colors[i]
    endfor
    
    legend,legend_titles, PSYM=[1,1,1,1,1],$
           /HORIZONTAL,$
           COLORS=[color_index[1],color_index[2],$
                   color_index[3],color_index[4],$
                   color_index[0]],$
           CHARSIZE=.7*!p.charsize
    tvlct, red, green, blue
    oplot, old_loop.s

    plot,old_ds, title='old s & min CLS',$
         XTITLE='Index #',$
         YTITLE='[cm]',$
         YRANGE=[min([old_ds,min_cls ]),$
                 max([old_ds,min_cls])*1.1]
    TVLCT, newRed, newGreen, newBlue
    for i=0l, n_elements(new_s)-1l do begin
        plots,i, min_cls[i] , psym=1, color=colors[i]
    endfor
    legend,legend_titles,  PSYM=[1,1,1,1,1],$
           /HORIZONTAL,$
           COLORS=[color_index[1],color_index[2],$
                   color_index[3],color_index[4],$
                   color_index[0]],$
           CHARSIZE=.7*!p.charsize
    tvlct, red, green, blue
    oplot,old_ds

    plot, old_ds,TITLE="Old & new ds" ,$
         XTITLE='Index #',$
         YTITLE='[cm]'
    oplot, ds,COLOR=128,LINESTYLE=2, thick=2
    y_range=[min([min(n_min_cls),min(ds)]),$
             1.1*max([max(n_min_cls),max(ds)])]
    TVLCT, newRed, newGreen, newBlue
    plot, ds,TITLE="ds & min cls" ,$
         XTITLE='Index #',$
         YTITLE='[cm]',yrange=y_range
    
        plots,0, ds[0] , psym=3, color=colors[0]
    for i=1l, n_elements(new_s)-1l do begin
        plots,i, ds[i] , $
              color=colors2[i],/CONTINUE
        plots,i, ds[i] , $
              color=colors2[i],PSYM=1
        
    endfor

    for i=0l, n_elements(new_s)-1l do begin
        plots,i, n_min_cls[i] , psym=5, color=colors2[i]
    endfor
    oplot, ds,color=255
    oplot, n_min_cls,linestyle=2,color=255
    legend,['CLS < ds','CLS > ds','CLS > 4*ds'],  PSYM=[2,2,2],$
           /HORIZONTAL,$
           COLORS=[color_index[0],color_index[2],$
                   color_index[3]],$
           CHARSIZE=.7*!p.charsize
    
    
    tvlct, red, green, blue
    
    xyouts, 390+70, 330, $
            'Change in particle number:'+string(n_part_old-n_part_new), $
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2
    
    xyouts, 390+70, 300, $
            'Change in particle number fractional difference:',$
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2
    
    xyouts, 410+70, 285, $
            string(abs(n_part_old-n_part_new)/n_part_new), $
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2

    xyouts, 390+70, 255, $
            'Change in energy:'+string(energy_total_old-energy_total_new), $
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2

    xyouts, 390+70, 225, $
            'Change in energy fractional difference:', $
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2

    xyouts, 410+70, 210, $
            string(abs(energy_total_old-energy_total_new)/energy_total_new), $
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2

    xyouts, 390+70, 180, $
            'Change in volume:'+string(old_volume_total-new_volume_total), $
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2

    xyouts, 390+70, 150, $
            'Change in volume fractional difference:',$
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2

    xyouts, 410+70, 135, $
            string(abs(old_volume_total-new_volume_total)/new_volume_total), $
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2

    xyouts, 390+70, 105, $
            'Min/Max ds: '+strcompress(string(min(ds)),/REMOVE_ALL)+'/' $
            +strcompress(string(max(ds)),/REMOVE_ALL)+' [cm]',$
            /DEVICE, CHARSIZE=1.3, CHARTHICK=1.2

      



    !p.multi=old_p_state
    !p.charsize=old_chars
    !p.charthick=old_chart
    
    pmm, (old_ds-ds)
    pmm, (old_loop.s-new_s)
END
