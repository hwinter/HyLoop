;+
;NAME:
;	msu_loop
;PURPOSE:
;	Iterate a dynamic loop model from time t to
;	t + delta_t. All units are cgs.
;CALLING SEQUENCE:
;	msu_loop, state, g, A, s, heating, delta_t $
;		[, T0=T0, /src, /uri, /fal, /debug, depth=depth]
;INPUT PARAMETERS:
;	state - a structure containing initial state
;		information as a function of position:
;		state.e - internal energy (N volume elements)
;		state.n_e - electron density (N volume elements)
;		state.v - velocity in x direction at the
;		    interstices between the volume 
;		    elements (N-1 elements)
;		state.time - time of specified state.
;	g - gravitational acceleration in x direction,
;		as a function of x (N-1 elements)
;	A - cross-sectional area as a function of x
;               (N-1 elements)
;	s - array containing position values for 
;		the boundaries between the volume elements
;		(s has N-1 elements). The intervals
;		should be slowly varying so as to
;		avoid numerical complications.
;	heating - coronal heating rate. Either constant
;		or an array with N-2 elements (volume
;		element grid, missing the ends).
;OPTIONAL KEYWORD INPUTS:
;	compile - if set, all other inputs are ignored and
;		loop6 returns immediately. This is useful for
;		compiling loop6 and its subroutines from an IDL
;		program. Unlike IDL resolve_routine, will not
;		recompile if loop6 is already defined.
;	T0 - boundary temperature (default = 1e4 K)
;	debug - integer values implement various
;		diagnostic options. Read the source.
;	depth - optional desired chromospheric depth. If this keyword
;		is nonzero, then corrections are applied to try to
;		maintain a chromosphere of a desired depth (add or
;		remove mass at the 1.1*T0 isotherm, which slides
;		the isotherm toward desired depth). If
;		depth <= 1, then the default depth of 1e6 cm is used.
;		If depth is greater than 1, then the value of the
;		keyword is the desired chromospheric depth in cm.
;	safety - Time stepping safety factor.
;		The time stepping interval dt is derived from
;		the Courant condition, divided by a safety factor
;		(5.0 by default). The purpose of the safety factor
;		is twofold: (1) numerical stability and (2) allow
;		conduction to be more effective than sound over
;		short distances. At the risk of infidelity to physics
;		and possible numerical instability, the safety
;		factor may be reduced (2 is usually OK), bringing
;		about a proportional increase in execution speed.
;KEYWORD SWITCHES:
;	SRC - if set, engages the 'shiny red chromosphere'
;		feature: radiative loss rate at T < T0
;		is set to zero, producing a chromosphere
;		of uniform temperature.
;OUTPUT:
;	state - after execution, updated state
;		information for time t + delta_t
;		is returned.
;PROCEDURE:
;	Internal energy (e) and electron density (n_e) are modeled
;	in N volume elements along an asymmetric, 1-dimensional
;	coronal loop. Velocity (v) is defined
;	on a staggered grid, occupying the N-1 interstices of the
;	volume elements. The first and last elements of v are:
;		v(0) = v(N-2) = 0 (zero flow).
;	The remaining physical boundary conditions are defined
;	in terms of the temperature and pressure in volume
;	elements 0 and N-1:
;		T(0) = T(N-1) = T0, a constant
;		P(0) = P(1), P(N-1) = P(N-2)
;	Thus, the boundary acts like a solid wall with
;	constant temperature. Actually, there's a small
;	gravity term that is not included in the
;	P equations. For bookkeeping purposes, the
;	internal energy and electron density will satisfy
;	the boundary conditions if:
;		e(0) = e(1), e(N-1) = e(N-2)
;		n_e(0) = e(0) / (3 * kB * T0)
;		n_e(N-1) = e(N-1) / (3* kB * T0)
;	where kB is Boltzmann's constant. The first and last 
;	volume elements exist only for the purpose of imposing 
;	boundary conditions. Since the energy and electron density
;	in these volume elements are outside the v=0 hard wall,
;	and because they vary to maintain the boundary conditions,
;	these boundary elements should not be included for purposes
;	of checking conservation of mass or energy.
;	   First-order differencing is employed on the staggered
;	grid, with advected quantities (internal energy, electron 
;	density) evaluated upstream. Because of the formulation,
;	mass and energy are rigorously conserved under
;	advection. Thermal conduction is done implicitly to
;	maintain numerical stability with reasonable-sized
;	time steps.
;	   Time stepping is done in two phases, 0.6dt and dt,
;	with the finite differences from the former being used
;	to advance the initial state through the latter.
;HISTORY:
;	1999-Dec-6 CCK new version (loop6-->loop6) corrects
;		for interference between the timestepping method
;		and implicit evaluation of the conduction term;
;		loop6 is a drop-in replacement for loop6.
;	1999-Dec-7 CCK debugged.
;       2007-APR-20 HDW Converted to msu_loop.pro
;           Enforced proper (), [] syntax. (Again! That's what 
;           happens when you revert to a previous version.  <sigh>)
;           Made DEBUG a passable keyword, which made sense.
;       2007-APR-24 HDW
;
;-


;------ VAU radiative loss function (1979 ApJ 233:987) ------
;KEYWORD PARAMETERS:
;	T0 - minimum temperature threshold used with /src option.
;KEYWORD SWITCHES:
;	SRC - if set, engages the 'shiny red chromosphere'
;		feature: radiative loss rate at T < T0
;		is set to zero, producing a chromosphere
;		of uniform temperature.
;	FAL - Values from 1e4 K to 1e5 K based on fig. 2 of E. H. 
;		Avrett in _Mechanisms of Chromospheric and Coronal 
;		Heating_, P. Ulmschneider, E. R. Priest, & R. Rosner 
;		Eds., Springer Verlag (1991), pp.97-99. This is 
;		based on the FAL transition region model, including 
;		corrections for optical depth and ambipolar 
;		diffusion. [An added point at 1e3 K merely 
;		extrapolates the radiative loss to arbitrarily
;		low temperature.]
;	URI - Values above 1e5 K based on recalculation of the
;		Cook et al. (1989 ApJ 338:1176) radiative loss
;		using the Feldman (1992 Phys Scr 46:202-220) coronal
;		abundances.
;	DISP - Ignore n_e and T inputs, and plot a graph of the
;		radiative loss function. If DISP is set but not
;		one, then OPLOT procedure is used, and minus the
;		value of DISP is used for the psym keyword.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;----- Eulerian time stepper (result is change in state variable) -----
function dstate, state, T, g, A, s, heating, dt, T0, $
                 src, depth, safety, uri, fal, $
                 DEBUG=DEBUG,$
                 SO=SO

common loopmodel, ds1, ds2, A1, is

;Force proper (), [] syntax
COMPILE_OPT STRICTARR
if not keyword_set(DEBUG) then DEBUG=0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Constants
kB = 1.38e-16 ;Boltzmann constant (erg/K)
me = 9.11e-28 ;electron mass (g)
mp = 1.67e-24 ;proton mass (g)
gamma = 5.0/3.0 ;ratio of specific heats, C_P/C_V
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;useful thermodynamic quantities (e/n_e grid)
P = (2.0/3.0)*state.e
;temperature interpolated to the v grid
T2 = (T[0:is-1] + T[1:is])/2.0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;calculate rho (mass density) on v grid
rho = mp * (state.n_e[0:is-1] + state.n_e[1:is])/2.0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;boundary conditions
state=msu_bcs(state, g, T0, ds2, is)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Upwind differencing stuff
vpos = float(state.v gt 0.0)
vneg = not vpos
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
;***** Continuity equation (n_e) *****
;Scheme rigorously conserves mass.
mass_flux = A * vpos * state.v * state.n_e[0:is-1] + $
            A * vneg * state.v * state.n_e[1:is]
dn_e = - (dt/A1)* $
	(mass_flux[1:is-1] - mass_flux[0:is-2])/ds1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***** Internal energy equation (e) *****
;Note: Advection uses a conservative form.
;Advection and work:
e_flux = A * vpos * state.v * state.e[0:is-1] + $
              A * vneg * state.v * state.e[1:is]

advect_work = -(dt/(A1*ds1)) * $
      ( e_flux[1:is-1] - e_flux[0:is-2] ) $ ;advection
   -(dt*P[1:is-1]/(A1*ds1)) * $
      (A[1:is-1]*state.v[1:is-1] - A[0:is-2]*state.v[0:is-2]);work

conduction = MSU_conduction(state, s,$
  SO=SO, $                     ;Pass the SO for C codes if desired
  IS=is, $
  DT=dt, $
  DS1=ds1, $
  DS2=ds2, $
  TEMP=TEMP,$
  S_GRID_TEMP=S_GRID_TEMP,$
  SPIT=SPIT)

radiative_loss=-msu_radloss(state.n_e[1:is-1],T[1:is-1],T0=T0,$
        	src=src,uri=uri,fal=fal, disp=disp,SO=SO )*dt 	
;Round up all terms
de = conduction[1:is-1] + advect_work   $
	+ radiative_loss $
	+ heating*dt
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;***** Momentum equation (v) *****
div_v = (state.v[1:is-1] - state.v[0:is-2])/ds1
dv =    - (dt/rho) * (P[1:is] - P[0:is-1])/ds2 $ ;grad P
	- dt * state.v * $
	  ( vpos * [0.0, div_v] + $
	    vneg * [div_v, 0.0] ) $ ;advection
	+ (dt*g) ;gravity

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Maintain chromospheric depth if desired.
if keyword_set(depth) then begin
	s_alt = [2*s[0]-s[1],(s[0:is-2]+s[1:is-1])/2.0,2*s[is-1]-s[is-2]]
        	;s on the volume element grid (like e, n_e)
        L = s[is-1] + s[0] ;Length of coronal loop
        
        ;find location of transition region at bottom of each loop leg.
	ss = where(T ge 1.1*T0)
        n_ss = n_elements(ss)
        i0 = ss[0]>1 & i1 = ss[n_ss-1]<(is-3)
        
        strength = (1.0/safety)*((depth - s_alt[i0])/depth)^3 $
        	< 1.0/safety > (-1.0/safety) ;clamp density loss
        nscale = 0.5*min(state.n_e[0:i0]) ;relevant density scale
        dn_e[i0] = dn_e[i0] + nscale*strength
	
        strength = (1.0/safety)*((depth - (L - s_alt[i1]))/depth)^3 $
        	< 1.0/safety > (-1.0/safety) ;clamp density loss
        nscale = 0.5*min(state.n_e[i1:is]) ;relevant density scale
        dn_e[i1] = dn_e[i1] + nscale*strength
endif
        

return, {e:[0.0,de,0.0], n_e:[0.0,dn_e,0.0], v:dv}
;This is almost a state structure, just lacks the time tag
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Begin Main Program ---------------------------------
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

pro msu_loop, loop, delta_t, debug=debug, $
              T0=T0, src=src, depth=depth, safety=safety,$
              uri=uri,fal=fal, OUT_LOOP=OUT_LOOP, $
              HEAT_FUNCTION=HEAT_FUNCTION,$
              SO=SO, E_H=E_H

common loopmodel, ds1, ds2, A1, is

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Check keyword switches

if not keyword_set(T0) then T0 = 1e4 ;default boundary temperature
if not keyword_set(HEAT_FUNCTION) then HEAT_FUNCTION='get_constant_heat'
if not keyword_set(safety) then safety = 5.0
if not keyword_set(DEBUG) then DEBUG=0

if keyword_set(depth) then begin
	if depth le 1 then depth = 1e6
endif

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Constants
kB = 1.38e-16 ;Boltzmann constant (erg/K)
me = 9.11e-28 ;electron mass (g)
mp = 1.67e-24 ;proton mass (g)
gamma = 5.0/3.0 ;ratio of specific heats, C_P/C_V
kappa0 = 1e-6 ;Spitzer thermal conductivity coefficient
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Only operate on the last loop element
temp_loop=loop[n_elements(loop)-1]
;state=temp_loop.state

delta_t = double(delta_t)


state0=temp_loop.state ;useful temporary variable
is = n_elements(temp_loop.state.e)-1l ;index of last gridpoint
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;calculate grid spacing
;valid indices run from 0 to is-2 (volume grid, missing ends
ds1 = temp_loop.s[1:is-1]-temp_loop.s[0:is-2]
	;)
;ds1 interpolated onto the v grid, ends estrapolated.
ds2 = [ds1[0],(ds1[0:is-3] + ds1[1:is-2])/2.0, ds1[is-2]]

;A interpolated onto the e/n_e grid (missing ends)
A1 = (temp_loop.A[0:is-2] + temp_loop.A[1:is-1])/2.0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

done = 0
start_tim =temp_loop.state.time
n_int = 0L ;number of dt intervals

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Begin time step loop
while not done do begin

;state=temp_loop.state

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Calculate dt, the largest allowable time step
    T = get_loop_temp(temp_loop)
;Compute sound speed
    cs = get_loop_sound_speed(temp_loop, T=T)
;Interpolate sound speed to surface grid
    cs_sm = (cs[0:is-1] + cs[1:is])/2.0
;Courant condition for advection and acoustic waves,
		;with a safety factor for stability.
    dt = min( ds1/(cs_sm + abs(temp_loop.state.v[0:is-1])) )/safety
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    if debug gt 0 then $
      if size(avg_courant,/TYPE) eq 0 then avg_courant=dt $
      else avg_courant=[avg_courant,dt]


    if ((temp_loop.state.time-start_tim) + dt ge delta_t) then begin ;almost done!
        dt = delta_t - (temp_loop.state.time - start_tim)
        done = 1                ;This will be the last iteration.
    endif
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Insert the heating &  momentum input from PaTC





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Insert the heating input from user defined 
;   function
heating=call_function(HEAT_FUNCTION,temp_LOOP, temp_loop.state.time, dt)

;stop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
;------ Do the time stepping here ------
;a bit more than 1/2 timestep for stability
    dt0 = 0.6 * dt              
    
    ds0 = dstate(temp_loop.state, T, temp_loop.g, temp_loop.A,$
                 temp_loop.s, heating, dt0, T0, $
                 src, depth, safety, uri, fal, DEBUG=DEBUG)
    state0.e = temp_loop.state.e + ds0.e  ;> 0.0
    state0.n_e = temp_loop.state.n_e + ds0.e
    state0.v = temp_loop.state.v + ds0.v
    state0.time = temp_loop.state.time + dt0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
;We feed the original temperature, T, to dstate. Thus,
;implicit timestep for conduction does not use the 0.6*dt
;timestep scheme.
    ds = dstate(state0, T, temp_loop.g, temp_loop.A, temp_loop.s, heating, dt, T0, $
                src,  depth, safety, uri, fal, DEBUG=DEBUG)
    temp_loop.state.e =temp_loop. state.e + ds.e    ;> 0.0
    temp_loop.state.n_e = temp_loop.state.n_e + ds.n_e
    temp_loop.state.v = temp_loop.state.v + ds.v
    temp_loop.state.time = temp_loop.state.time + dt
    
    n_int = n_int + 1
   ; temp_loop.state=state
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Make an array to store the 
;information on the heating 
    s_alt=get_loop_s_alt(temp_loop)

    if size(e_h_array,/TYPE) eq 0 then e_h_array=heating*dt $
    else e_h_array=e_h_array+(heating*dt) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Level 2 debug
    if debug ge 2 then begin
        plot,temp_loop.state.e,xrange=[80,150],yrange=[0,3]
                                ;oplot,alog10(state.e/(3*state.n_e*kB)),psym=3
        xyouts,1,1,'time = '+string(temp_loop.state.time),/device
        wait,1
    endif

endwhile
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
temp_loop.state=msu_bcs(temp_loop.state, temp_loop.g, T0, ds2, is)
temp_loop.e_h=(e_h_array)/delta_t
;
if debug gt 0 then begin
    print,'Model time (s): ',temp_loop.state.time,' Number of intervals: ',n_int
    print,'Total number of electrons:',total(temp_loop.state.n_e[1:is-1]*A1*ds1)
    print, 'Avg Courant dt: '+STRCOMPRESS(mean(avg_courant,/DOUBLE),/REMOVE_ALL)
endif

if keyword_set(E_H) then E_H=temp_loop.e_h

if not  keyword_set(OUT_LOOP) then loop=(temp_loop) $
else OUT_LOOP=(temp_loop)

END ;OF MAIN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
