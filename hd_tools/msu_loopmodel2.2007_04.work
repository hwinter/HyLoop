;+
;NAME: 
;	loopmodel
;PUPROSE:
;	Front end for numerical loop model (loop6.pro). Takes
;	an initial state and propagates forward in time.
;	Results are saved to disk at 1s time intervals.
;CALLING SEQUENCE:
;	loopmodel, g, A, x, heat, interval, [, state=state, lhist=lhist, $
;		T0=T0, outfile=outfile, /src, /fal, /uri, depth=depth]
;INPUT PARAMETERS:
;       g - gravitational acceleration in x direction,
;               as a function of x (N-1 elements)
;       A - cross-sectional area as a function of x
;               (N-1 elements)
;       x - array containing position values for 
;               the boundaries between the volume elements
;               (x has N-1 elements). The intervals
;               should be slowly varying so as to
;               avoid numerical complications.
;       heat - coronal heating rate. Either constant
;               or an array with N-2 elements (volume
;               element grid, missing the ends).
;	interval - amount of time (s) to run the model forward.
;		This gets rounded to the nearest second.
;OPTIONAL KEYWORD INPUTS:
;	lhist - An array of state vectors giving the previous
;		history of the loop. If lhist is specified, then
;		the initial conditions are read from the last
;		entry of lhist and state (if given) is ignored.
;		On output, lhist contains a history of states.
;	state - Initial state structure. Must be supplied if 
;		lhist is not. On output, contains the final state.
;		state.e - internal energy (N volume elements)
;		state.n_e - electron density (N volume elements)
;		state.v - velocity in x direction at the
;		    interstices between the volume 
;		    elements (N-1 elements)
;		state.time - time of specified state.
;	T0 - Temperature at the loop boundaries (chromospheric
;		footpoints). If not specified, it is read
;		from the zeroth volume element of the state vector.
;	outfile - File to store results (lhist, g, A, x, heat). If
;		the display device is set to the z-buffer, then
;		real time graphical output is suppressed, and the
;		present state of the system (state, g, A, x, heat)
;		is output as a save file called outfile+'.snap'.
;	src - optional switch to cut off radiative losses below 
;		T=T0, thus holding the chromospheric temperature
;		above the boundary condition temperature.
;	depth - optional desired chromospheric depth. If this keyword
;		is nonzero, then corrections are applied to try to
;		maintain a chromosphere of a desired depth (add or
;		remove mass at the 1.1*T0 isotherm, which slides
;		the isotherm toward desired depth). If
;		depth <= 1, then the default depth of 1e6 cm is used.
;		If depth is greater than 1, then the value of the
;		keyword is the desired chromospheric depth in cm.
;	safety - timestepping safety factor; see loop6.pro.
;OUTPUTS:
;	lhist - array of state structures, giving the loop history
;		as a function of time.
;	state - final state of the loop.
;HISTORY:
;	1999-Feb-4 written by Charles C. Kankelborg
;	1999-Feb-12 CCK fixed lhist append bug
;	1999-Feb-16 CCK: depth & safety keywords (see loop6.pro)
;	1999-Jun-27 CCK: uri & fal keywords (see loop6.pro radloss)
;	1999-Jun-29 CCK: modified so that when 'z' buffer ia used,
;		graphical output is suppressed and realtime info is
;		sent to a small save file (*.snap). This is very
;		handy for running in batch mode!
;	1999-Aug-18 CCK: fixed crash when depth keyword not set
;	1999-Sep-20 CCK: fixed lhist append off-by-one error
;	1999-Dec-6 CCK: updated from loop5 to loop6.
;-
pro msu_loopmodel2, loop, heat, interval,  $
                    T0=T0, FILE_PREFIX=FILE_PREFIX, $
                    FILE_EXT=FILE_EXT, src=src, uri=uri, fal=fal, $
                    depth=depth, safety=safety,QUIET=QUIET, $;Begin regrid keywords
                    REGRID=REGRID, GRID_SAFETY=GRID_SAFETY, $
                    PERCENT_DIIFERENCE=PERCENT_DIIFERENCE, $
                    MAX_STEP=MAX_STEP, $
                    QUADRATIC=QUADRATIC, LSQUADRATIC=LSQUADRATIC, $
                    SPLINE=SPLINE, SHOWME=SHOWME,$
                    DELTA_T=DELTA_T
t_start = systime(1) ;initialize computer time
if size(loop, /TYPE) eq 0 then begin
		print,'Hey, what are the initial conditions?'
		message,'Neither lhist nor state was specified!'
            goto, end_jump
        endif


old_loop=loop
;constants
kB = 1.38e-16 ;Boltzmann constant (erg/K)
mp = 1.67e-24 ;proton mass (g)
gamma = 5.0/3.0 ;ratio of specific heats, Cp/Cv
gs = 2.74e4 ;solar surface gravity

if not keyword_set(FILE_PREFIX) then FILE_PREFIX ='' 
if not keyword_set(FILE_EXT) then  FILE_EXT='loop'
	;file in which to save results

;timing information
if not keyword_set(DELTA_T) then delta_t = 1.0 ;time interval (s) between saved data
num_iterations = long(interval+0.5)  ;round to nearest second

i1 = long(n_elements(old_loop)) ;where are we starting?
loop=old_loop[i1-1]

;loop=[loop,replicate(loop,num_iterations) ]
	;Unless T0 is specified explicitly, just read it off
	;of the initial state vector
;working_loop=loop[i1-1]

if not keyword_set(T0) then T0 = loop.state.e[0]/(3*loop.state.n_e[0]*kB)

for i=i1, i1+num_iterations-1 do begin
    
    if keyword_set(REGRID) then $
      regrid_step,loop, SHOWME=SHOWME, GRID_SAFETY=GRID_SAFETY, $
                  MAX_STEP=MAX_STEP, $
                  ENERGY_PD=ENERGY_PD, PARTICLE_PD=PARTICLE_PD, $
                  MOMENTUM_PD=MOMENTUM_PD, VOLUME_PD=VOLUME_PD, $
                  ENERGY_CHANGE=ENERGY_CHANGE, $
                  MOMENTUM_CHANGE=MOMENTUM_CHANGE, $
                  VOLUME_CHANGE=VOLUME_CHANGE $
      else begin
        MAX_STEP=0
        ENERGY_PD=0
        PARTICLE_PD=0
        MOMENTUM_PD=0
        VOLUME_PD=0
        ENERGY_CHANGE=0 
        MOMENTUM_CHANGE=0
        VOLUME_CHANGE=0
        
    endelse
    
    
    state=loop.state
    
;Get the grid spacing
    N = n_elements(loop.state.e) ;figure out grid size
    ds = loop.s[1:N-2] - loop.s[0:N-3]
;	loop6, state, g, A, x, heat, delta_t, T0=T0, $
;        	src=src, fal=fal, uri=uri, depth=depth, safety=safety
;The same as loop6 but without any c_code

    loop6a, state,loop.g, loop.A,loop.s, heat, delta_t, T0=T0, $
            src=src, fal=fal, uri=uri, depth=depth, safety=safety

    loop.state=state
	
;Save a snapshot of the present state.
    save, loop,heat, ENERGY_PD, PARTICLE_PD, $
                 MOMENTUM_PD, VOLUME_PD, $
                 ENERGY_CHANGE, $
                 MOMENTUM_CHANGE, $
                 VOLUME_CHANGE,$
          filename=strcompress(FILE_PREFIX $
          +'_' $
          +string(i,format='(I05)') $
          +'.'+FILE_EXT,/REMOVE_ALL)

    if keyword_set(SHOWME) then $
      stateplot2, loop.s, loop.state, /screen
    if not keyword_set(QUIET) then begin	
        print,'Model time: '+strcompress(string(state.time),/REMOVE_ALL)+ $
              's    Real time: '+strcompress(string(systime(1)-t_start),/REMOVE_ALL),'s'+ $
              '  Min/Max V:  '+strcompress(string(min(state.v)/1d5),/REMOVE_ALL)+ $
              '/'+strcompress(string(max(state.v)/1d5),/REMOVE_ALL)+'[km/s]'
        print,'grid spacing runs from ',min(ds)/100.0,' m  to ',max(ds)/100000.0,' km.'
        Print, 'Number of volume grids: ',N
        if not keyword_set(depth) then depth=0 ;prevent crashes in next line!
        print,'keyword DEPTH =',depth
        
        print,'########################################################################'
    endif
    
endfor

end_jump:
t_end= systime(1) ;get computer time
run_time=t_end-t_start
end
