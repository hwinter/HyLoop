;.r chromo_test_junk.pro
n_depth=10

n_cells=1000
;Depth into the chromosphere
depth=2d6; [cm]
Tmax = 3d6 ;K
Length=3d9 ;[cm],30 Mega meters
diameter=1d7 ;[cm]
;magnetic field strength
B=100
mk_semi_circular_loop,diameter,Length, $
  T_MAX=Tmax, outname=outname,N_CELLS=N_CELLS,$
  X_SHIFT=X_SHIFT,Y_SHIFT=Y_SHIFT,$
  Z_SHIFT=Z_SHIFT, LOOP=LOOP,$
  depth=depth, N_DEPTH=N_DEPTH,$
  /ADD_CHROMO,$            
  SIGMA_FACTOR=10

ds=get_loop_ds(loop)
plot, ds
stop
;We are going to us
pd_b=1d5
ds=get_loop_ds(loop)
ds_first=ds[0]

percent_difference=abs(ds[1]-ds[0])/ds_first


N_DEPTH_s=n_depth-1

A_0=ds_first*(1d0-percent_difference)
if A_0*(N_DEPTH_s) le depth then begin
    N_DEPTH_s=long(depth/A_0)+10
    N_DEPTH=N_DEPTH_s
    print,'Not enough cells to maintain a smooth distribution.'
    print,'Changing the number of cells to '+$
          strcompress(string(N_DEPTH), /REMOVE_ALL)+'.'
endif

n_depth>=3

ind_array=dindgen(N_DEPTH_s)
done=0

start_time=systime(1)

p0=2*dindgen(1d4)/1d3
y_p0=p0

i_0=0
for i=0ul, n_elements(p0) -1ul do begin
    d_step1= (A_0)*exp(-p0[i]*ind_array/N_DEPTH_s)
    y_p0[i]= total(d_step1)-(DEPTH)

endfor

set_plot, 'x'
window,0
plot, p0,y_p0
start_time=systime(1)
pmm, y_p0

c1=1
print, 'Starting C1',c1;
;goto, next_try
repeat begin
    
    d_step1= (A_0)*exp(-C1*ind_array/N_DEPTH_s)
    plot, d_step1
    
    y_n=total(d_step1)-(DEPTH)
    y_prime_n=total((-ind_array/Max(ind_array))*d_step1)
    ;y_prime_n=total(-d_step1)
    
    plot, p0,y_p0
    plots, c1, y_n, psym=5
    pd_b=ABS((total(d_step1)-(DEPTH))/(DEPTH))
    PRINT,'PD_B, C1, total(d_step1)/(DEPTH)', PD_B, C1, total(d_step1)/(DEPTH);;
    
    C1_new=C1-(y_n/y_prime_n)       ;
    if c1_new lt 0 then c1 =C1+(y_n/y_prime_n)   else c1 =c1_new
    print, 'y_prime_n',y_prime_n,(y_n/y_prime_n)
endrep until  pd_b LT 1D-10
end_time=systime(1)
print,'Time:', end_time-start_time
plot, d_step1
stop
next_try:
p1=3.5D0
p2=1.5D-1
done=0
   
start_time=systime(1)
repeat begin
;

    y_p1= total((A_0)*exp(-p1*ind_array/Max(ind_array)))-(DEPTH)    
    y_p2= total((A_0)*exp(-p2*ind_array/Max(ind_array)))-(DEPTH)
    print, y_p1, y_p2,  p1,  p2
    print, 'Finding the ps'
    if ( y_p1 lt 0 ) and ( y_p2 ge 0 ) then begin
        done =1 
        goto, done_step
        endif
    
    if total(finite([y_p1, y_p2,  p1,  p2])) lt 4 then stop
    if y_p1 gt 0 then p1=p1*2.
    if y_p2 le 0 then p2=p2*(0.5)
    
    y_p1= total((A_0)*exp(-p1*ind_array/Max(ind_array)))-(DEPTH)    
    y_p2= total((A_0)*exp(-p2*ind_array/Max(ind_array)))-(DEPTH)
    if ( y_p1 lt 0 ) and ( y_p2 ge 0 ) then done =1
done_step:
endrep until done eq 1 
print, ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'
    print, y_p1, y_p2,  p1,  p2
print, ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'
;This method uses to points (p1 & p1), one positive and one negative, and draws a line (chord)
; between them that pass through 0.  It then goes through an iterative scheme for zeroing in
; on b. 
i_1=0
;Needs good guesses on p1 & p2 to converge quickly.
repeat begin
    
    d_step_p1=A_0*exp(-p1*ind_array/Max(ind_array))
    d_step_p2=A_0*exp(-p2*ind_array/Max(ind_array))
    
    C1=(5d-1)*(p1+p2)
    d_step1=A_0*exp(-c1*ind_array/Max(ind_array))
    y_n=total(d_step1)-(DEPTH)

    y_p1=total(d_step_p1)-(DEPTH)
    y_p2=total(d_step_p2)-(DEPTH)

;Now if f(A) is the same sign as f(x[n]) then A:=x[n]
; else B:=x[n]

    sign_f_of_a=sign(y_p1,y_p1)
    if sign_f_of_a/p2 ge 0. then p1=C1 else p2=c1 
    pd_b=ABS((total(d_step1)-(DEPTH))/(DEPTH))
    PRINT,'PD_B, C1, total(d_step1)/(DEPTH)'
    PRINT, PD_B, C1, total(d_step1)/(DEPTH);;
if c1 eq 6d0 then stop
endrep until  pd_b LT 1D-10
if total(finite(d_step1)) ne N_DEPTH_s then stop


print, ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'
print, ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'
end_time=systime(1)
print, end_time-start_time

end
